#!/usr/bin/perl
#
#  ###################################################################
#
#  Disclaimer and Notice of Copyright
#  ==================================
#
#  Copyright (c) 2014, Los Alamos National Security, LLC
#  All rights reserved.
#
#  This software was produced under U.S. Government contract
#  DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL),
#  which is operated by Los Alamos National Security, LLC for
#  the U.S. Department of Energy. The U.S. Government has rights
#  to use, reproduce, and distribute this software.  NEITHER
#  THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES
#  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY
#  FOR THE USE OF THIS SOFTWARE.  If software is modified to
#  produce derivative works, such modified software should be
#  clearly marked, so as not to confuse it with the version
#  available from LANL.
#
#  Additionally, redistribution and use in source and binary
#  forms, with or without modification, are permitted provided
#  that the following conditions are met:
#  -  Redistributions of source code must retain the
#     above copyright notice, this list of conditions
#     and the following disclaimer.
#  -  Redistributions in binary form must reproduce the
#     above copyright notice, this list of conditions
#     and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  -  Neither the name of Los Alamos National Security, LLC,
#     Los Alamos National Laboratory, LANL, the U.S. Government,
#     nor the names of its contributors may be used to endorse
#     or promote products derived from this software without
#     specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC
#  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
#  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
#  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
#  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
#  OF SUCH DAMAGE.
#
#  ###################################################################

#
#     Low level utility to parse a logFile for results.
#     Searches for the test name, the jobid, and PASS/FAIL strings.
#     All pass fail results are proceeded by the string <results>.
#
#     Any occurance of FAIL results returns FAIL, even
#     if PASS also exists. If neither pass nor fail results
#     exist, then UNDEF is returned if the test completed.
#     If the test did not complete, then we will consider the
#     results INCOMPLETE (to messed up to figure out, a.k.a foobar).
#

my $prog;
($prog = $0) =~ s/.*\///;

require "getopts.pl";
use Getopt::Std;
use strict;
use File::Basename;

my $jid = "undef";
my $tn;
my $exitCode;
our %opt;
$opt{v} = "";
my @tmp;

# v option with no arg
&getopts('v', \%opt);

my $logFile    = shift;
our $passed     = 0;
our $failed     = 0;
our $learning   = 0;
my $fileSystem = "";
our $end = "";
my $jobNotFinished = 0;

open( RESULT, "<$logFile" ) or die "$prog: Failed to open $logFile: $!\n";

my $bd = dirname($logFile);
unless ( -e "$bd/post_complete" ) {
  $jobNotFinished = 1;
}

my (
    $dev,  $ino,   $mode,  $nlink, $uid,     $gid, $rdev,
    $size, $atime, $mtime, $ctime, $blksize, $blick
) = stat($logFile);

$_ = localtime($mtime);
my ( $wday, $mon, $day, $time, $year ) =
  /(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/;
my $dt = "$mon-$day-$year $time";

if ($opt{v}) { print "$prog: examining log: $logFile \n"; }

my $resultsStr = "";
my $failedResultsStr = "";
while (<RESULT>) {

    #       print "DEBUGGING: input=$_\n";
    #        chop( $_  );
    #        if( /(.*) file write\/read testing/i ){ $fileSystem = $1; }

    #      if ($opt_v) { print "$_"; }

    if (/^<testName>/) {
        @tmp = split ' ', $_;
        $tn = $tmp[1];
        next;
    }

    if (/^<JobID> (\d+)/) {
        $jid = $1;
        next;
    }

     # except both result and results, save and print remaining info on line
     if (/<result\w{0,1}>\s*(.+)/){
        $resultsStr = $1;
        chomp($resultsStr);
        if ($opt{v}) { print " --> $prog: found -> $_\n"; }
        if ($resultsStr =~ /LEARN/i) {
         $learning = 1;
        } else {
        # if test has both pass and fail results save the last msg 
          if ($resultsStr =~ /PASS/i) {
            $passed = 1;
          }
          if ($resultsStr =~ /FAIL/i) {
            $failedResultsStr = $resultsStr;
            $failed = 1;
          }

        }
        next;
    }

    if( /^<end> (\S+)/ ) {
       $end = $1;
       next;
    }
}

# if fail exists in results file, fail and we are done
if ( $failed == 1 ) {
        print "\t$dt $tn:$jid =>(F) $failedResultsStr\n";
        $exitCode = 1;

} elsif ( $jobNotFinished ) {
      # no post complete file, job died or maybe still running
        print "\t$dt $tn:$jid => INCOMPLETE\n";
        $exitCode = 1;

} elsif ( $passed == 0 ) {
    # pass never found, hmmm, do a bit more checking

    # could be in the learning mode
    if ($learning)  {
        print "\t$dt $tn:$jid => LEARNING MODE\n";
        $exitCode = 1;
    }
    # so no Fail or Pass, now what?
    elsif (( $jid == "") || ($end == ""))  {
        # doesn't look like it finished 
        print "\t$dt $tn:$jid => INCOMPLETE\n";
        $exitCode = 0;
    }
    else {
        # it ran, but no explicit results, so default to undefined 
        print "\t$dt $tn:$jid => UNDEF, no explicit results in output\n";
        $exitCode = 1;
    }
} else {
    # a good one, only the word pass exists in the results
    print "\t$dt $tn:$jid =>(P) $resultsStr\n";
    $exitCode = 0;
}

close(RESULT);
exit($exitCode);
