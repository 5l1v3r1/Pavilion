#!/usr/bin/perl
#
# get node list from moab using the checkjob command
# input: requires one input argument, the jobid of the job in question
# output: list of nodes the job owns

use Sys::Hostname;
#use strict;

$| = 1;

#----- get gazebo config values -------------- #

use Cwd 'abs_path';
use File::Basename;
my $pwd = dirname(abs_path("$0"));
chomp($pwd);
#our $mnd = $gazebo_conf{"Max_Node_Digits"};
our $mnd = 3;


if ($0 =~ /^([ &:#-\@\w.]+)$/) { $0 = $1; }
else { die "Bad data, exiting.\n"; }

my $myjobid = shift; 
if (!defined $myjobid) {
  print "ERROR: no job id entered, exiting!\n";
  exit;
}

my $mm = `which checkjob`;
chomp($mm);
my $MDIAG = "$mm $myjobid";
my @uniq = ();
my %seen = ();
my $nodelist = "";
my $ptr;

#   print "begin - nodelist: $nodelist\n";

            my $output = `$MDIAG`;
            my @lines = split "\n",$output;
            for ( my $res=0; $res<@lines; $res++ ) {
               next if (! ( $lines[$res] =~ /Allocated Nodes:/ ));
               $ptr = $res;
               $ptr++;
               last;
            }

            # when we get here process until next blank line
            my $thisline;
            while ($thisline = $lines[$ptr++]) {
               last if ($thisline =~ /^\s+$\n/);

               if ($thisline =~ /[\-*]/) {
                   # handle this type of thing (loa 059-060,047-050,041-042 *16)
                   # OR
                   # handle this type of thing (*16 306,310,198,250,242,265,218,235 ml)
                   $nodelist .= &get_from_type_A($thisline);
               } else {
                   # handle this type of thing
                   # [loa041:16][loa042:16][loa047:16][loa048:16][loa049:16][loa050:16]
                   $nodelist .= &get_from_type_B($thisline);
                }
            }

        my @nodelist = split (/ /, $nodelist); 
        # remove any dups of node names
        foreach my $item (@nodelist) {
          push(@uniq, $item) unless $seen{$item}++;
        }
        my @sl = sort @uniq;
        print "@sl\n";



  sub get_from_type_A {
    my $line = $_[0];
    my $cu;
    my @vals;
    my $range;
    my $nodes;
    my $startnum;
    my $endnum;
    my $diff;

    my $fdl = "%0" . $mnd . "d";

         $line =~ s/\*[0-9]+\s*//g;
         $line =~ s/\]\[/ /g;
         $line =~ s/\[/ /g;
         $line =~ s/\]/ /g;
         $line =~ s/\s*([a-zA-Z]+)\s*//g;

         $cu = $1;
         @vals = split(",", $line);
         foreach $range (@vals) {
           if ( $range =~ /-/) {
             ($startnum,$endnum) = split("-", $range);
             $diff = $endnum - $startnum;
#             my $sn = sprintf("%03d", $startnum);
             my $sn = sprintf("$fdl", $startnum);
             $nodes .= " $cu$sn";
             my $c =1;
             while ( $diff > 0 ) {
               my $n = $startnum + $c;
#               my $fn = sprintf("%03d", $n);
               my $fn = sprintf("$fdl", $n);
               $diff--;
               $c++;
               $nodes .= " $cu$fn";
             }
           } else {
             $nodes .= " $cu$range";
           }
         }
         return "$nodes";
  }

  sub get_from_type_B {
    my $line = $_[0];

               $line =~ s/\]\[/ /g;
               $line =~ s/\[/ /g;
               $line =~ s/\]/ /g;
               $line =~ s/\:[0-9]+//g;
               return $line;
  }


exit


