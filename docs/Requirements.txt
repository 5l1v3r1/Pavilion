Gazebo2 or Cluster Test Handler (CLTH) Functional Requirements
Ver 1.3


1. Functionality exists in current version of Gazebo and is to be continued.
-----------


1.1  Runs as a user process, not a root process.  Gracefully handles permissions to support multiple users running out of the same installation space.   
1.2  Placeholders for results created immediately upon launch
1.3 Supports a continual testing mode
1.4 Supports testing at a target load level
1.5 Supports a delay time between test suite launches
1.6 Defined convention to automate data collection of test outputs (for example current trend data tags)
1.7 Generator for system coverage statistics
1.8 Generator for individual test run time statistics 
1.9 Generator for passing and failing results with runtime statistics
1.10 Supports time based analysis (minute or better granularity)  
1.11 Hierarchical directory store for raw data to facilite easy access to results



2. Exists in some form now, but needs significant development/enhancements
---------

2.1  Support for Moab and other schedulers and resource manager combinations.
2.2 Support running simultaneous single or multiple test suites.  
2.3 Support targeting nodes and segments, where possible.  
2.4 Minimize job launch script footprint 
2.5 Support run-time test instance copy to new run location ( default now) 
2.6 Supports build and then run mode, as well as running existing binaries
2.7 Support measuring work and results spaces ( go/no-go decision to run based on available system resources )
2.8 Better user documentation / developer documentation
2.9 Provide solid generic test code(s) (gcc based?) as example(s).
2.10 Generation of baseline trend data 
2.11 Performance learning capability to determine threshold for pass/fail. (Polish work done by Evan) 
2.12 Summary result reporting (what more specifically)
2.13 Automating fail analysis reporting based on known failures (knowledge based analysis)
2.14 Performance data summaries and charting
2.15 Much simpler design for making it easy to add tests



3. New Requirements
------------
 
3.1  Support multiple test managers running simultaneously.
3.2 Support multiple master test suite configuration file to support feeding a variety of parameters to tests.  
3.3 Support testing front-ends as well as compute nodes > lends to testing fta's
3.4 Elegant way of handling combinatorial parameter studies. 
3.5 Mechanism to hook in measurement/profiling tools ( power aware, LDMS, sensors, I/O, profiling, fingerprinting )   
3.6 Support multiple compilers libraries and optimization levels and flags in once test instance, not requiring new test directories (same as # 10 ??)
3.7 GUI job monitoring / launching / results analysis mechanism
3.8 Singular Command line interface providing comprehensive list of features
3.9 System component discovery mechanism (both hardware and software) with autopopulation of main config file where appropriate.
3.10 Modular design/architecture for ease of co-development.
3.11 Functions have self test or unit test built-in for regression test verification. 
3.12 User interface through one command




