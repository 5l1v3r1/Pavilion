Pavilion (Gazebo-II) Testing Framework

#  ###################################################################
#
#  Disclaimer and Notice of Copyright 
#  ==================================
#
#  Copyright (c) 2015, Los Alamos National Security, LLC
#  All rights reserved.
#
#  Copyright 2015. Los Alamos National Security, LLC. 
#  This software was produced under U.S. Government contract 
#  DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), 
#  which is operated by Los Alamos National Security, LLC for 
#  the U.S. Department of Energy. The U.S. Government has rights 
#  to use, reproduce, and distribute this software.  NEITHER 
#  THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES 
#  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY 
#  FOR THE USE OF THIS SOFTWARE.  If software is modified to 
#  produce derivative works, such modified software should be 
#  clearly marked, so as not to confuse it with the version 
#  available from LANL.
#
#  Additionally, redistribution and use in source and binary 
#  forms, with or without modification, are permitted provided 
#  that the following conditions are met:
#
#  1. Redistributions of source code must retain the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer. 
#  2. Redistributions in binary form must reproduce the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer in the documentation 
#     and/or other materials provided with the distribution. 
#  3. Neither the name of Los Alamos National Security, LLC, 
#     Los Alamos National Laboratory, LANL, the U.S. Government, 
#     nor the names of its contributors may be used to endorse 
#     or promote products derived from this software without 
#     specific prior written permission.
#   
#  THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC 
#  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
#  IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS 
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
#  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
#  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
#  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
#  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
#  OF SUCH DAMAGE.
#
#  ###################################################################

 Functional Requirements/Goals

 ver. 1.8

 - This is the basic wish list (not in any particular priority) for what's desired
   in Pavilion.


1. Functionality that exists in current version of Gazebo that's to be continued.
-----------

1.1 Run as a user process.  Gracefully handles permissions to support multiple users running out of the same
    installation space.   
1.2 Placeholder (directory) for results created immediately upon launch
1.3 Supports a continual testing mode
1.4 Supports testing at a targeted load level
1.5 Supports a delay time between test suite launches
1.6 Defined convention to automate data collection of test output results (for example, current trend data tags)
1.7 Maintains enough data and provides tools to generate system coverage statistics
1.8 Maintains enough data and provides tools to generate individual test run-time stats.
1.9 Maintains enough data and provides tools for summarizing passing and failing results with runtime statistics
1.10 Supports efficient time based analysis (user selectable results to any time frame)  
1.11 Hierarchical directory store for raw data to facilite easy accss to results



2. Features that exist in some form in Gazebo, but need improvements/enhancements.
---------

2.1 Support for Moab and other schedulers/resource manager combinations.
2.2 Support for running simultaneous single or multiple test suites.  
2.3 Support for targeting nodes and segments, where possible.  
2.4 Minimize job launch script footprint called from DRM
2.5 Support run-time test instance copy to new run location (is default now) 
2.6 Supports build and then run mode, as well as running existing binaries
2.7 Support pre-run of resource availability before launch ( i.e. - go/no-go decision to run based on available file space )
2.8 Better user documentation / developer documentation
2.9 Provide some generic test code(s) (gcc based?) as example(s).
2.10 Tools to automate generating baseline performance results. 
2.11 Performance learning capability to determine threshold for pass/fail. (Polish up work done by Evan) 
2.12 Summary result reporting
2.13 Automated fail analysis reporting based on known failures (knowledge based analysis)
2.14 Automated performance data summaries and charting
2.15 Simpler design for making it easy to add tests



3. New Requirements
------------
 
3.1 Support multiple test managers running simultaneously (continuous launching tool)
3.2 Support multiple master test suite configuration file for feeding a variety of parameters to tests.  
3.3 Support testing front-ends as well as compute nodes thus facilitating testing fta's too
3.4 Elegant way of handling combinatorial parameter studies. 
3.5 Mechanism to hook in measurement/profiling tools ( power aware, LDMS, sensors, profiling, etc.)   
3.6 Support multiple compilers libraries and optimization levels and flags for one test instance, not requiring
    new test directories
3.7 GUI job monitoring / launching / results analysis mechanism
3.8 Singular command line interface providing comprehensive list of features
3.9 System component discovery mechanism (both hardware and software) with autopopulation of main config file
     where appropriate.
3.10 Modular design/architecture for ease of co-developing the harness.
3.11 Functions have self test or unit test built-in for regression test verification. 
3.12 Portable across Linux based clusters  (not dependent on specific site installations )
3.13 Maintain as much compatibiliy with Gazebo so that old tools and new tools can be used to analyze results
     generated by either. 
