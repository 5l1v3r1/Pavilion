Pavilion functional High Level Design Specification 
ver 1.2

This document couples with the requirements document describing in more detail the specific requirment and the general implementation plan for that requirement. The intent is not to formalize the implementation details, but to provide a living document where developers and designers have a common understaning of the requirement and how it will be architected/developed/enhanced, etc.    

This document also provides a mechanism to delineate the current, or at least, initial developer/owner of the feature. 

There should be a one-to-one correspondance between these numbers and numbers in the requirements document.

1.1

1.2

1.3

1.4

1.5

1.6

1.7

1.8

1.9

1.10

1.11

-------


2.1 - Configurable job launch mechanism

Discussion:
 Gazebo only supports jobs/tests lauched via Moab. New harness should support other
launch mechanisms. Also, Gazebo acquires the node allocation before calling the specific test.
It is desireable for individual tests to have an option not to have this done before hand, or at all.

Implementation:

a) some type of DRM specific test setup file
b) test specific condition to specify how to launch


2.2

2.3

2.4 - Decrease footprint of launch wrapper script  (SetUpandRun)

Discussion:
  Gazebo tests are launched with Moab calling a common wrapper script called SetUpandRun.  This is very useful in that a common set of values need to be collectd and stored in the output log for each test; something that can only be determined at run time with Moab. This script needs to be more lightweight as it creates quite a bit of overhead in Moab.


2.5 - Simplified copy-on-run feature

Discussion:
 When a Gazebo test is launched all of its working files (no object code, some include files, etc) are copied to a separate directory  and run from that space. This allows simultaneous runs of the same test not to interfere with one another.
The feature works well but can create quite a bit of file I/O overhead. Should we simply make
this feature an option and not move any files as a default?



2.6

2.7

2.8

2.9

2.10

2.11

2.12

2.13

2.14

2.15 - Ease of test integration

Discussion:

a) auto populated test specific config file



-------

3.1

3.2

3.3

3.4 - Improved mechanism to handle extensive multiple variations of same test elegantly.

Disussion:
  Often the same test needs to run in slightly different ways. For instance, with
differnet libs, compilers, and even just variations of the number of nodes and cores.
Having to create a test suite with large number of similar lines is cumbersome. A
better solution is needed.

a) propose an XMLish style test suite with names and value lists that can be iterated through.


3.5

3.6

3.7

3.8

3.9 - Automated system setup/discovery

Owner - Jennifer Green

Discussion:
 The main gazebo.conf file is presently built by hand. Separate the system architecture
parts from the user defined parts and create a mechanism where the system part is discovered
automatically.

Implementation:

a) discovery(build) step with findings placed into special named file
b) placement into system config file from newly built file manual
c) testing of system arch a real test and part of new test harness release
d) new file that describes system wide user defined parameters (ex. result directory)


3.10 - Ease of co-developemnt built into the architecture/design of the test harness.

Owner - Craig Idler

Discussion:
 As much as possible simplify the ability to add features to the test harness with a goal towards open source collaboration.

Implementation:

a) separate modules for each function
b) help feature dynamic (read help info out of module src at runtime)


3.11 - Unit test driven development 

Discussion:
 Each function or component added to the test harness must contain some level of self testing so that a sanity check (or unit test) can always be
made to verify new updates don't break existing components. 

a) also test across different revs of Python 
